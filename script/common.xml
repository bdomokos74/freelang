<project xmlns:ivy="antlib:org.apache.ivy.ant" name="common" basedir=".">

    <macrodef name="check-prop">
        <attribute name="propname"/>
        <sequential>
            <fail unless="@{propname}"
                  message="Property @{propname} must be set."/>
        </sequential>
    </macrodef>

    <dirname property="common.root.dir" file="${ant.file.common}"/>
    <property name="root.dir" value="${common.root.dir}/.."/>

    <property name="target.dir" value="${root.dir}/target"/>
    <property name="dist.dir" value="${target.dir}/dist"/>

    <property name="main.dir" location="${root.dir}/src/main"/>
    <property name="src.dir" location="${main.dir}/java"/>
    <property name="resources.dir" location="${main.dir}/resources"/>
    <property name="compile.dir" value="${target.dir}/classes"/>

    <property name="test.dir" location="${root.dir}/src/test"/>
    <property name="test.src.dir" location="${test.dir}/java"/>
    <property name="test.resources.dir" location="${test.dir}/resources"/>
    <property name="test.compile.dir" value="${target.dir}/test-classes"/>

    <property name="systemtest.compile.dir" value="${target.dir}/systemtest-classes"/>
    <property name="systemtest.src.dir" value="${root.dir}/src/systemtest/java"/>
    <property name="systemtest.resources.dir" value="${root.dir}/src/systemtest/resources"/>
    <property name="systemtest.report.dir" value="${target.dir}/reports/systemtest"/>

    <property name="javadoc.dir" value="${target.dir}/javadoc"/>

    <property name="ivy.report.dir" value="${target.dir}/reports/ivy-reports"/>
    <property name="test.report.dir" value="${target.dir}/reports"/>

    <property name="ivy.install.version" value="2.1.0"/>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>
    <available file="${ivy.jar.file}" property="ivy.jar.found"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>

    <target name="download-ivy" unless="ivy.jar.found">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy" description="ivy initilaziation">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="ivy-clean-cache">
        <ivy:cleancache/>
    </target>

    <target name="init-common" depends="init-ivy">
        <property name="ivy.settings.file" value="ivysettings.xml"/>
        <ivy:settings file="${ivy.settings.file}"/>
    </target>

    <target name="init-script" depends="init-common">
        <path id="script.classpath"/>
        <ivy:cachepath pathid="script.classpath" conf="script"/>
    </target>

    <target name="init-compile" depends="init-common">
        <mkdir dir="${compile.dir}" />
        <path id="compile.classpath"/>
        <ivy:cachepath pathid="compile.classpath" conf="default"/>
    </target>

    <target name="init" depends="init-ivy, init-common, init-script, init-compile">
        <mkdir dir="${compile.dir}"/>
        <mkdir dir="${test.compile.dir}"/>
        <mkdir dir="${test.report.dir}"/>

        <path id="test.compile.classpath"/>
        <ivy:cachepath pathid="test.compile.classpath" conf="default, nodeploy, test"/>

        <path id="runtime.classpath"/>
        <ivy:cachepath pathid="runtime.classpath" conf="script"/>

        <property environment="env"/>
    </target>

    <target name="compile" depends="init-compile">
        <javac srcdir="${src.dir}" includes="**/*.java" encoding="utf-8"
               destdir="${compile.dir}"
               debug="true">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>
    </target>

    <target name="test-compile" depends="compile">
        <javac srcdir="${test.src.dir}" includes="**/*.java" encoding="utf-8"
               destdir="${test.compile.dir}"
               debug="true">
            <classpath>
                <path refid="test.compile.classpath"/>
                <pathelement location="${compile.dir}"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="test-compile" description="-> Runs the JUnit tests">
        <junit printsummary="yes" errorproperty="test.failed" failureproperty="test.failed">
            <formatter type="plain"/>
            <classpath>
                <pathelement location="${test.compile.dir}"/>
                <pathelement location="${compile.dir}"/>
                <pathelement location="${test.resources.dir}"/>
                <path refid="compile.classpath"/>
                <path refid="test.compile.classpath"/>
            </classpath>
            <batchtest fork="yes" todir="${test.report.dir}">
                <fileset dir="${test.src.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>

        <fail if="test.failed">
            Tests failed. Check ${test.report.dir}.
        </fail>
    </target>

    <target name="systemtest-compile-java" depends="system-test-init, compile">
        <javac srcdir="${systemtest.src.dir}" includes="**/*.java"
               destdir="${systemtest.compile.dir}"
               debug="true">
            <classpath>
                <path refid="compile.classpath"/>
                <path refid="test.compile.classpath"/>
                <pathelement location="${compile.dir}"/>
            </classpath>
        </javac>
    </target>

    <target name="system-test-init" depends="init">
        <mkdir dir="${systemtest.compile.dir}"/>
    </target>

    <target name="systemtest-compile" depends="system-test-init, systemtest-compile-java">
    </target>

    <target name="system-test" depends="system-test-init, systemtest-compile"
            description="--> Run system tests">

        <echo message="Running system tests..."/>

        <mkdir dir="${systemtest.report.dir}"/>

        <junit printsummary="yes" failureproperty="system.tests.failed" errorproperty="system.tests.failed" >
            <formatter type="xml"/>
            <classpath>
                <pathelement location="${compile.dir}"/>
                <pathelement location="${resources.dir}"/>
                <pathelement location="${systemtest.compile.dir}"/>
                <pathelement location="${systemtest.resources.dir}"/>
                <path refid="compile.classpath"/>
                <path refid="runtime.classpath"/>
                <path refid="test.compile.classpath"/>
            </classpath>
            <batchtest fork="yes" todir="${systemtest.report.dir}">
                <fileset dir="${systemtest.compile.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${systemtest.report.dir}">
            <fileset dir="${systemtest.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${systemtest.report.dir}/html"/>
        </junitreport>

        <fail if="system.tests.failed">
            System tests failed, check ${test.report.dir}.
        </fail>
    </target>

    <target name="showproperties" depends="init">
        <echoproperties/>
    </target>

    <target name="clean" description="--> Cleans this project">
        <delete dir="${target.dir}" failonerror="false"/>
    </target>

    <target name="ivy-report" depends="init">
        <mkdir dir="${ivy.report.dir}"/>
        <ivy:report xml="false" graph="true" todir="${ivy.report.dir}"/>
    </target>

    <target name="javadoc" depends="init">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc sourcepath="${src.dir}" destdir="${javadoc.dir}" classpathref="compile.classpath"/>
    </target>

    <target name="javadoc-zip" depends="javadoc">
        <zip destfile="${target.dir}/javadoc.zip" basedir="${target.dir}/javadoc"/>
    </target>

</project>
        